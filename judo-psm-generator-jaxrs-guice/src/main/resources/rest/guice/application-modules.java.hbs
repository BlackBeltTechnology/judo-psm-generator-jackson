package {{ modelGuiceRestPackageName model }};

public class {{ guiceRestApplicationModules model }} extends com.google.inject.AbstractModule {

{{# each (allExposedTransferObjectWithOperation model) as |to| }}
    @com.google.inject.Inject
    {{ namedElementApiRestFqName to }} {{ variableName to }};

{{/ each }}

    @com.google.inject.Inject
    java.util.Set<javax.ws.rs.core.Application> applications;

    public static class {{ guiceRestApplicationModulesBuilder model }} {
{{# each (allExposedTransferObjectWithOperation model) as |to| }}
        {{ namedElementApiRestFqName to }} {{ variableName to }};
{{/ each }}
    }

    @lombok.Builder
    private {{ guiceRestApplicationModules model }}(
{{# each (allExposedTransferObjectWithOperation model) as |to| }}
        {{ namedElementApiRestFqName to }} {{ variableName to }}{{# unless @last }},{{/ unless }}
{{/ each }}
    ) {
{{# each (allExposedTransferObjectWithOperation model) as |to| }}
        this.{{ variableName to }} = {{ variableName to }};
{{/ each }}
    }

    com.google.inject.multibindings.Multibinder<javax.ws.rs.core.Application> applicationMultibinder;

    @Override
    protected void configure() {
        applicationMultibinder = com.google.inject.multibindings.Multibinder.newSetBinder(binder(), javax.ws.rs.core.Application.class);
        configureServices();
        {{# each (allAccessPointActor model) as |actor| }}
        configure{{ className actor }}Application();
        {{/ each }}
        binder().requestInjection(this);
    }

    protected void configureServices() {
        {{# each (allExposedTransferObjectWithOperation model) as |to| }}
        if (this.{{ variableName to }} != null) {
            bind({{ namedElementApiRestFqName to }}.class).toInstance(this.{{ variableName to }});
        } else {
            bind({{ namedElementApiRestFqName to }}.class).toProvider({{ guiceRestServiceProviderClassFqName to }}.class).asEagerSingleton();
        }
        {{/ each }}
    }

    {{# each (allAccessPointActor model) as |actor| }}
    protected void configure{{ className actor }}Application() {
        applicationMultibinder.addBinding().toProvider({{ guiceRestApplicationProviderFqName actor }}.class).asEagerSingleton();
    }
    {{/ each }}
}
