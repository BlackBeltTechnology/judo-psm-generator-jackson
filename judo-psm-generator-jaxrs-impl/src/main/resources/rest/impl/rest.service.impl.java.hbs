{{> fragment.header.hbs }}

package {{ namedElementImplRestPackageName self }};

@javax.ws.rs.Path("/")
public class {{ implClassName self }} implements {{ namedElementApiRestFqName self }} {


    java.util.Optional<hu.blackbelt.judo.dispatcher.api.Dispatcher> __dispatcher = java.util.Optional.empty();

    @Override
    public void __bindDispatcher(hu.blackbelt.judo.dispatcher.api.Dispatcher dispatcher) {
        this.__dispatcher = java.util.Optional.of(dispatcher);
    }

    @Override
    public void __unbindDispatcher(hu.blackbelt.judo.dispatcher.api.Dispatcher dispatcher) {
        this.__dispatcher = java.util.Optional.empty();
    }

{{# each self.operations as | operation | }}

    {{# if operation.isStatelessAndHasNoInputParameter }}
    @javax.ws.rs.GET
    {{ else }}
    @javax.ws.rs.POST
    @javax.ws.rs.Consumes("application/json")
    {{/ if }}
    @javax.ws.rs.Produces({{# if operation.isExportOperation }}javax.ws.rs.core.MediaType.APPLICATION_OCTET_STREAM{{ else }}"application/json"{{/ if }})
    @javax.ws.rs.Path("/{{ toJAXRSPath operation model }}")
    @hu.blackbelt.judo.dispatcher.api.JudoOperation("{{ operation.operationAsmFqName }}")
    {{# if operation.output }}
    {{# if operation.output.isMany }}
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Successful operation",
        content = @io.swagger.v3.oas.annotations.media.Content(
                array =
                    @io.swagger.v3.oas.annotations.media.ArraySchema(
                      schema = @io.swagger.v3.oas.annotations.media.Schema(
                        implementation = {{ getOperationOutputFQName operation }}ForResponse.class
                    )
                )
        )
    )
    {{ else }}
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Successful operation",
        content = @io.swagger.v3.oas.annotations.media.Content(
                schema = @io.swagger.v3.oas.annotations.media.Schema(
                        implementation = {{ getOperationOutputFQName operation }}ForResponse.class
                )
        )
    )
    {{/ if }}
    {{ else }}
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "Successful operation")
    {{/ if }}
    @io.swagger.v3.oas.annotations.responses.ApiResponse(
                                                            responseCode = "400",
                                                            content = @io.swagger.v3.oas.annotations.media.Content(
                                                                array = @io.swagger.v3.oas.annotations.media.ArraySchema(
                                                                    schema = @io.swagger.v3.oas.annotations.media.Schema(
                                                                        implementation = {{ apiDefaultPackageName model }}.Error.class
                                                                    )
                                                                )
                                                            ),
                                                            description = "Missing object ID of operation" +
                                                                                         "\t\nToo few items in parameter." +
                                                                                         "\t\nNull item is not supported." +
                                                                                         "\t\nMissing required parameter." +
                                                                                         "\t\nConversion failed." +
                                                                                         "\t\nToo few items in relation." +
                                                                                         "\t\nToo many items in relation." +
                                                                                         "\t\nNull item is not supported." +
                                                                                         "\t\nInvalid content." +
                                                                                         "\t\nMissing requered relation." +
                                                                                         "\t\nMissing requered attribute." +
                                                                                         "\t\nValue is too long." +
                                                                                         "\t\nValue does not match pattern." +
                                                                                         "\t\nToo many digits." +
                                                                                         "\t\nInvalid scale." +
                                                                                         "\t\nInvalid identifier." +
                                                                                         "\t\nInvalid file token." +
                                                                                         "\t\nInvalid reference." +
                                                                                         "\t\nIdentifier attribute is not unique." +
                                                                                         "\t\nInvalid query mask." +
                                                                                         "\t\nInvalid identifier in query customizer." +
                                                                                         "\t\nEntity not found."
                                                        )
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Authentication required." +
                                                                                              "\t\nToken expired.")
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied." +
                                                                                              "\t\nUser not exists or disabled." +
                                                                                              "\t\nPermission denied.")
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "Not found.")
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "422", description = "Business fault")
    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "Internal server error.")
    public javax.ws.rs.core.Response {{ safeName operation.name }}(
        @javax.ws.rs.core.Context javax.ws.rs.core.SecurityContext securityContext, @javax.ws.rs.HeaderParam("X-Judo-CountRecords") java.lang.String __countRecords
        {{# if operation.isBoundOperation }}
        , @javax.ws.rs.HeaderParam("X-Judo-SignedIdentifier") java.lang.String __signedIdentifier
        {{/ if }}
        {{# if operation.input }}
        {{# if operation.input.isMany }}
        ,
         @io.swagger.v3.oas.annotations.parameters.RequestBody(
                 content = @io.swagger.v3.oas.annotations.media.Content(
                    array =
                        @io.swagger.v3.oas.annotations.media.ArraySchema(
                            schema = @io.swagger.v3.oas.annotations.media.Schema(
                                {{# if operation.isCreateOperation}}
                                    implementation = {{ getOperationInputFQName operation }}NotStored.class
                                {{ else }}
                                    implementation = {{ getOperationInputFQName operation }}.class
                                {{/ if }}
                            )
                        )
                 )
         )
         java.util.List<java.util.Map<java.lang.String, java.lang.Object>> {{ safeName operation.input.name.firstToLower }}
        {{ else }}
        ,
        @io.swagger.v3.oas.annotations.parameters.RequestBody(
                content = @io.swagger.v3.oas.annotations.media.Content(
                        schema = @io.swagger.v3.oas.annotations.media.Schema(
                                 {{# if operation.isCreateOperation}}
                                 implementation = {{ getOperationInputFQName operation }}NotStored.class
                                 {{ else }}
                                 implementation = {{ getOperationInputFQName operation }}.class
                                 {{/ if }}
                        )
                )
        )
        java.util.Map<java.lang.String, java.lang.Object> {{ safeName operation.input.name.firstToLower }}
        {{/ if }}
        {{/ if }}
    ) {
        if (!__dispatcher.isPresent()) {
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.SERVICE_UNAVAILABLE).build();
        }
        java.util.Map<java.lang.String, java.lang.Object> parameters = new java.util.HashMap();
        parameters.put("__exposed", Boolean.TRUE);
        if (__countRecords != null && __countRecords.trim().length() > 0) {
            parameters.put("__countRecords", Boolean.TRUE);
        }
        {{# if operation.isBoundOperation }}
        parameters.put("__signedIdentifier", __signedIdentifier);
        {{/ if }}
        if (securityContext != null) {
            parameters.put("__principal", securityContext.getUserPrincipal());
        }
        {{# if operation.input }}
        if ( {{ operation.input.name.firstToLower }} != null ) {
        parameters.put("{{ operation.input.name }}", {{ operation.input.name.firstToLower }});
        }
        {{/ if }}
        java.util.Map<java.lang.String, java.lang.Object> result = __dispatcher.get().callOperation("{{ operation.operationAsmFqName }}", parameters);
        {{# if operation.operationOutputTypeDefined }}
        {{# if operation.isExportOperation }}

        java.io.File tmpdir = new java.io.File(System.getProperty("java.io.tmpdir"));
        java.io.File file = new java.io.File(tmpdir, java.util.UUID.randomUUID().toString() + ".xlsx");
        file.deleteOnExit();

        try(java.io.InputStream is = ((java.io.InputStream) result.get("output")); java.io.OutputStream os = new java.io.FileOutputStream(file)) {
            is.transferTo(os);
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException(e);
        }

        javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.ok(file, javax.ws.rs.core.MediaType.APPLICATION_OCTET_STREAM)
            .header("Access-Control-Expose-Headers", "Content-Disposition")
            .header("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"");
        {{ else }}
        javax.ws.rs.core.Response.ResponseBuilder responseBuilder = result != null && result.containsKey("{{ operation.output.name }}") ? javax.ws.rs.core.Response.ok(result.get("{{ operation.output.name }}")) : javax.ws.rs.core.Response.ok();
        {{/ if }}
        {{ else }}
        javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.NO_CONTENT);
        {{/ if }}
        if (result != null && result.containsKey(hu.blackbelt.judo.dispatcher.api.Dispatcher.HEADERS_KEY)) {
            ((java.util.Map<java.lang.String, java.lang.Object>) result.get(hu.blackbelt.judo.dispatcher.api.Dispatcher.HEADERS_KEY)).forEach((k, v) -> responseBuilder.header(k, v));
        }
        return responseBuilder.build();
    }


{{/ each }}

}
