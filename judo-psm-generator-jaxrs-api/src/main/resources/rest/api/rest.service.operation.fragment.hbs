{{# if operation.isStatelessAndHasNoInputParameter }}
@javax.ws.rs.GET
{{ else }}
@javax.ws.rs.POST
@javax.ws.rs.Consumes("application/json")
{{/ if }}
@javax.ws.rs.Produces({{# if operation.isExportOperation }}javax.ws.rs.core.MediaType.APPLICATION_OCTET_STREAM{{ else }}"application/json"{{/ if }})
@javax.ws.rs.Path("/{{ toJAXRSPath operation model }}")
@hu.blackbelt.judo.dispatcher.api.JudoOperation("{{ operation.operationAsmFqName }}")
{{# if generateOpenApiAnnotations }}
@io.swagger.v3.oas.annotations.Operation(operationId = "{{ operation.operationAsmFqName }}", tags = {"{{ operation.getOperationTagName }}"})
{{# if operation.output }}
{{# if operation.output.isMany }}
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Successful operation",
    content = @io.swagger.v3.oas.annotations.media.Content(
            array =
                @io.swagger.v3.oas.annotations.media.ArraySchema(
                  schema = @io.swagger.v3.oas.annotations.media.Schema(name = "{{ getOperationOutputLogicalFullName operation }}",
                    implementation = {{ getOperationOutputFQNameForResponse operation }}.class
                )
            )
    )
)
{{ else }}
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Successful operation",
    content = @io.swagger.v3.oas.annotations.media.Content(
            schema = @io.swagger.v3.oas.annotations.media.Schema(name = "{{ getOperationOutputLogicalFullName operation }}",
                    implementation = {{ getOperationOutputFQNameForResponse operation }}.class
            )
    )
)
{{/ if }}
{{ else }}
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "Successful operation")
{{/ if }}
@io.swagger.v3.oas.annotations.responses.ApiResponse(
                                                        responseCode = "400",
                                                        content = @io.swagger.v3.oas.annotations.media.Content(
                                                            array = @io.swagger.v3.oas.annotations.media.ArraySchema(
                                                                schema = @io.swagger.v3.oas.annotations.media.Schema(
                                                                    implementation = {{ apiDefaultPackageName model }}.Error.class
                                                                )
                                                            )
                                                        ),
                                                        description = ERROR_400_MESSAGES
                                                    )
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Authentication required." +
                                                                                            "\t\nToken expired.")
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied." +
                                                                                            "\t\nUser not exists or disabled." +
                                                                                            "\t\nPermission denied.")
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "Not found.")
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "422", description = "Business fault")
@io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "Internal server error.")
{{/ if }}
public javax.ws.rs.core.Response {{ safeName operation.name }}(
    @javax.ws.rs.core.Context
    javax.ws.rs.core.SecurityContext securityContext,
    @javax.ws.rs.HeaderParam("X-Judo-CountRecords")
    java.lang.String __countRecords,
    @javax.ws.rs.HeaderParam("X-Judo-Mask")
    java.lang.String __mask
    {{# if operation.isBoundOperation }}
    , @javax.ws.rs.HeaderParam("X-Judo-SignedIdentifier")
    java.lang.String __signedIdentifier
    {{/ if }}
    {{# if operation.input }}
    {{# if operation.input.isMany }}
    ,
    {{# if generateOpenApiAnnotations }}
    @io.swagger.v3.oas.annotations.parameters.RequestBody(
            content = @io.swagger.v3.oas.annotations.media.Content(
                array =
                    @io.swagger.v3.oas.annotations.media.ArraySchema(
                        schema = @io.swagger.v3.oas.annotations.media.Schema(name = "{{ getOperationInputLogicalFullName operation }}",
                            {{# if operation.isCreateOperation}}
                                implementation = {{ getOperationInputFQNameForCreateRequest operation }}.class
                            {{ else }}
                                implementation = {{ getOperationInputFQNameForRequest operation }}.class
                            {{/ if }}
                        )
                    )
            )
    )
    {{/ if }}
    java.util.List<java.util.Map<java.lang.String, java.lang.Object>> {{ safeName operation.input.name.firstToLower }}
    {{ else }}
    ,
    {{# if generateOpenApiAnnotations }}
    @io.swagger.v3.oas.annotations.parameters.RequestBody(
            content = @io.swagger.v3.oas.annotations.media.Content(
                    schema = @io.swagger.v3.oas.annotations.media.Schema(name = "{{ getOperationInputLogicalFullName operation }}",
                                {{# if operation.isCreateOperation}}
                                implementation = {{ getOperationInputFQNameForCreateRequest operation }}.class
                                {{ else }}
                                implementation = {{ getOperationInputFQNameForRequest operation }}.class
                                {{/ if }}
                    )
            )
    )
    {{/ if }}
    java.util.Map<java.lang.String, java.lang.Object> {{ safeName operation.input.name.firstToLower }}
    {{/ if }}
    {{/ if }}
)